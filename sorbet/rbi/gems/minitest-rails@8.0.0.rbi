# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `minitest-rails` gem.
# Please instead update this file by running `bin/tapioca gem minitest-rails`.


# These changes are here to support the spec DSL when using Rails parallelize.
# The issue is the spec DSL creates Class objects that are not assigned to
# a Ruby constant. When those Class objects are passed through Drb they are
# wrapped in a DrbObject and cannot be run. The solution is to assign each Class
# object to a constant. Hopefully the constant name is consistent enough that
# the constant can be passed across processes (or even machines).
#
# source://minitest-rails//lib/minitest/rails/version.rb#1
module Minitest
  class << self
    # source://minitest/5.25.4/lib/minitest.rb#323
    def __run(reporter, options); end

    # source://minitest/5.25.4/lib/minitest.rb#97
    def after_run(&block); end

    # source://minitest/5.25.4/lib/minitest.rb#20
    def allow_fork; end

    # source://minitest/5.25.4/lib/minitest.rb#20
    def allow_fork=(_arg0); end

    # source://minitest/5.25.4/lib/minitest.rb#70
    def autorun; end

    # source://minitest/5.25.4/lib/minitest.rb#20
    def backtrace_filter; end

    # source://minitest/5.25.4/lib/minitest.rb#20
    def backtrace_filter=(_arg0); end

    # source://minitest/5.25.4/lib/minitest.rb#19
    def cattr_accessor(name); end

    # source://minitest/5.25.4/lib/minitest.rb#1216
    def clock_time; end

    # source://minitest/5.25.4/lib/minitest.rb#303
    def empty_run!(options); end

    # source://minitest/5.25.4/lib/minitest.rb#20
    def extensions; end

    # source://minitest/5.25.4/lib/minitest.rb#20
    def extensions=(_arg0); end

    # source://minitest/5.25.4/lib/minitest.rb#336
    def filter_backtrace(bt); end

    # source://minitest/5.25.4/lib/minitest.rb#20
    def info_signal; end

    # source://minitest/5.25.4/lib/minitest.rb#20
    def info_signal=(_arg0); end

    # source://minitest/5.25.4/lib/minitest.rb#125
    def init_plugins(options); end

    # source://minitest/5.25.4/lib/minitest.rb#109
    def load_plugins; end

    # source://minitest/5.25.4/lib/minitest.rb#20
    def parallel_executor; end

    # source://minitest/5.25.4/lib/minitest.rb#20
    def parallel_executor=(_arg0); end

    # source://minitest/5.25.4/lib/minitest.rb#143
    def process_args(args = T.unsafe(nil)); end

    # source://minitest/5.25.4/lib/minitest.rb#104
    def register_plugin(name_or_mod); end

    # source://minitest/5.25.4/lib/minitest.rb#20
    def reporter; end

    # source://minitest/5.25.4/lib/minitest.rb#20
    def reporter=(_arg0); end

    # source://minitest/5.25.4/lib/minitest.rb#269
    def run(args = T.unsafe(nil)); end

    # source://minitest/5.25.4/lib/minitest.rb#1207
    def run_one_method(klass, method_name); end

    # source://minitest/5.25.4/lib/minitest.rb#20
    def seed; end

    # source://minitest/5.25.4/lib/minitest.rb#20
    def seed=(_arg0); end
  end
end

# source://minitest-rails//lib/minitest/rails/version.rb#2
module Minitest::Rails; end

# source://minitest-rails//lib/minitest/rails/railtie.rb#10
class Minitest::Rails::Railtie < ::Rails::Railtie; end

# source://minitest-rails//lib/minitest/rails/version.rb#3
Minitest::Rails::VERSION = T.let(T.unsafe(nil), String)
